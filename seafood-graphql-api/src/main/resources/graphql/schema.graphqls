scalar BigDecimal
scalar Instant
enum AddressType {
    AVENUE
    STREET
    VALLEY
}
type Address {
    addressType: AddressType
    address: String
    number: String
    complement: String
}
enum PersonType {
    INDIVIDUAL_PERSON
    LEGAL_ENTITY
}
type Person  {
    name: String
    documentNo: String
    email: String
    phone: String
    personType: PersonType
    addresses: [Address]
}
type IndividualPerson {
    name: String
    personType: PersonType
}
type LegalEntity {
    name: String
    documentNo: String
    email: String
    phone: String
    personType: PersonType
    addresses: [Address]
}
type Item {
    id: String
    description: String
    store: Store
    price: BigDecimal
    createdAt: Instant
    updatedAt: Instant
}
type Store {
    id: String
    storeInfo: StoreUser
    score: Float
    createdAt: Instant
    updatedAt: Instant
}
type Sell {
    id: String
    store: Store
    buyer: BuyerUser
    items: [Item]
    createdAt: Instant
    updatedAt: Instant
}
type BuyerUser {
    id: String
    userInfo: IndividualPerson
    createdAt: Instant
    updatedAt: Instant
}
type StoreUser {
    id: String
    userInfo: LegalEntity
    createdAt: Instant
    updatedAt: Instant
}
type User {
    id: String
    password: String
    userInfo: Person
    createdAt: Instant
    updatedAt: Instant
}
input UserInput {
    id: ID
    password: String!
    userInfo: PersonInput!
}
input BuyerUserInput {
    id: String
    userInfo: IndividualPersonInput!
    createdAt: Instant
    updatedAt: Instant
}
input StoreUserInput {
    id: String
    userInfo: LegalEntityInput!
    createdAt: Instant
    updatedAt: Instant
}
input PersonInput {
    name: String!
    documentNo: String!
    email: String!
    phone: String!
    personType: PersonType!
    addresses: [AddressInput]!
}
input IndividualPersonInput {
    name: String
    personType: PersonType
}
input LegalEntityInput {
    name: String
    documentNo: String
    email: String
    phone: String
    personType: PersonType
    addresses: [AddressInput]
}
input AddressInput {
    addressType: AddressType!
    address: String!
    number: String!
    complement: String
}
input SellInput {
    id: String
    store: StoreInput!
    buyer: BuyerUserInput!
    items: [ItemInput]!
}
input StoreInput {
    id: String
    storeInfo: StoreUserInput!
    score: Float
}
input ItemInput {
    id: String
    store: StoreInput!
    price: BigDecimal
    description: String!
}
input PasswordChangeInput {
    userId: ID
    oldPasswd: String!
    newPasswd: String!
}
type Query {
    findAllUsersByNamePrefix(namePrefix: String): [User]
    findAllSellsByUserId(id: ID): [Sell]
    findAllSellsByStoreId(id: ID): [Sell]
    findAllStoresByNamePrefix(namePrefix: String): [Store]
    findAllItemsByDescriptionPrefix(descriptionPrefix: String): [Item]
    findAllItemsByStoreId(id: ID): [Item]
    findUserByDocumentNo(documentNo: String): User
    findUserByEmail(email: String): User
    findUserById(id: ID): User
    findSellById(id: ID): Sell
    findStoreById(id: ID): Store
    findItemById(id: ID): Item
}
type Mutation {
    saveUser(user: UserInput): User
    changePassword(passwordChange: PasswordChangeInput): User
    saveSell(sell: SellInput): Sell
    saveStore(store: StoreInput): Store
    saveItem(item: ItemInput): Item
    deleteUser(userId: ID): User
    deleteSell(sellId: ID): Sell
    deleteStore(storeId: ID): Store
    deleteItem(itemId: ID): Item
}
