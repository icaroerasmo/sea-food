scalar Long
scalar LocalDateTime
enum AddressType {
    AVENUE
    STREET
    VALLEY
}
type Address {
    addressType: AddressType
    address: String
    number: String
    complement: String
}
enum PersonType {
    INDIVIDUAL_PERSON
    LEGAL_ENTITY
}
type Person {
    name: String
    documentNo: String
    email: String
    phone: String
    personType: PersonType
    addresses: [Address]
}
type Item {
    id: String
    description: String
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}
type Store {
    id: String
    storeInfo: Person
    score: Long
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}
type Sell {
    id: String
    store: Store
    buyer: User
    items: [Item]
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}
type User {
    id: String
    password: String
    userInfo: Person
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}
input UserInput {
    id: String
    password: String
    userInfo: PersonInput
}
input PersonInput {
    name: String
    documentNo: String
    email: String
    phone: String
    personType: PersonType
    addresses: [AddressInput]
}
input AddressInput {
    addressType: AddressType
    address: String
    number: String
    complement: String
}
input SellInput {
    id: String
    store: StoreInput
    buyer: UserInput
    items: [ItemInput]
}
input StoreInput {
    id: String
    storeInfo: PersonInput
    score: Long
}
input ItemInput {
    id: String
    description: String
}

type Query {
    findAllUsersByNamePrefix(namePrefix: String): [User]
    findAllSellsByUserId(id: ID): [Sell]
    findAllSellsByStoreId(id: ID): [Sell]
    findAllStoresByNamePrefix(namePrefix: String): [Store]
    findAllItemsByDescriptionPrefix(descriptionPrefix: String): [Item]
    findAllItemsByStoreId(id: ID): [Item]
    findUserById(id: ID): User
    findSellById(id: ID): Sell
    findStoreById(id: ID): Store
    findItemById(id: ID): Item
}
type Mutation {
    saveUser(user: UserInput): User
    saveSell(sell: SellInput): Sell
    saveStore(store: StoreInput): Store
    saveItem(item: ItemInput): Item
    deleteUser(userId: ID): ID
    deleteSell(sellId: ID): ID
    deleteStore(storeId: ID): ID
    deleteItem(itemId: ID): ID
}